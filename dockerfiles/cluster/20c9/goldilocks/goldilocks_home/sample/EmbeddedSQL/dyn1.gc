/*
 * dyn1.gc
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

EXEC SQL INCLUDE SQLCA;

#define  SUCCESS  0
#define  FAILURE  -1

#define  PRINT_SQL_ERROR(aMsg)                                      \
    {                                                               \
        printf("\n");                                               \
        printf(aMsg);                                               \
        printf("\nSQLCODE : %d\nSQLSTATE : %s\nERROR MSG : %s\n",   \
               sqlca.sqlcode,                                       \
               SQLSTATE,                                            \
               sqlca.sqlerrm.sqlerrmc );                            \
    }

EXEC SQL BEGIN DECLARE SECTION;
typedef struct Record
{
    int          mEmpNo;
    varchar      mEName[20 + 1];
    char         mJob[20];
    char         mSalary[10];
} Record;
EXEC SQL END DECLARE SECTION;

int Connect(char *aHostInfo, char *aUserID, char *sPassword);

int main(int argc, char **argv)
{
    EXEC SQL BEGIN DECLARE SECTION;
    Record       sRecord[5];
    char         sSql[2][128] = {
        "SELECT empno, ename, job, sal FROM EMP ORDER BY empno",
        "SELECT empno, ename, job, sal FROM EMP ORDER BY sal DESC"
    };
    EXEC SQL END DECLARE SECTION;

    int  sSqlIdx = 0;
    int  sRecordCount = 0;
    int  i;

    printf("Connect GOLDILOCKS ...\n");
    if(Connect("DSN=GOLDILOCKS", "test", "test") != SUCCESS)
    {
        goto fail_exit;
    }

    /***********************************************
     * Retrieve employee
     **********************************************/
    for( sSqlIdx = 0; sSqlIdx < 2; sSqlIdx ++ )
    {
        printf( "QUERY: %s\n", sSql[sSqlIdx] );

        EXEC SQL PREPARE STMT FROM :sSql[sSqlIdx];
        if(sqlca.sqlcode != 0)
        {
            PRINT_SQL_ERROR("[ERROR] SQL ERROR -");
            goto fail_exit;
        }

        EXEC SQL DECLARE DYN_CUR CURSOR FOR STMT;

        EXEC SQL OPEN DYN_CUR;
        if(sqlca.sqlcode != 0)
        {
            PRINT_SQL_ERROR("[ERROR] SQL ERROR -");
            goto fail_exit;
        }

        sRecordCount = 0;
        printf(" EMPNO    ENAME                JOB       SALARY\n");
        printf("====== ==================== ========== ==========\n");

        while( 1 )
        {
            EXEC SQL
                FETCH DYN_CUR
                INTO  :sRecord;

            if(sqlca.sqlcode == SQL_NO_DATA)
            {
                break;
            }
            else if(sqlca.sqlcode != 0)
            {
                PRINT_SQL_ERROR("[ERROR] SQL ERROR -");
                goto fail_exit;
            }

            for(i = 0; i < sqlca.sqlerrd[2]; i ++)
            {
                sRecordCount ++;

                printf("%6d %20s %10s %10s\n",
                       sRecord[i].mEmpNo,
                       sRecord[i].mEName.arr,
                       sRecord[i].mJob,
                       sRecord[i].mSalary);
            }
        }

        printf("====== ==================== ========== ==========\n");
        printf("Record Count = %d\n", sRecordCount);
        printf("====== ==================== ========== ==========\n");

        EXEC SQL CLOSE DYN_CUR;
        if(sqlca.sqlcode != 0)
        {
            PRINT_SQL_ERROR("[ERROR] SQL ERROR -");
            goto fail_exit;
        }

        printf("\n\n");
    }

    EXEC SQL COMMIT WORK RELEASE;
    if(sqlca.sqlcode != 0)
    {
        PRINT_SQL_ERROR("[ERROR] SQL ERROR -");
        goto fail_exit;
    }

    printf("SUCCESS\n");
    printf("############################\n");

    return 0;

  fail_exit:

    printf("\n\nFAILURE\n");
    printf("############################\n\n");

    EXEC SQL ROLLBACK WORK RELEASE;

    return 0;
}

int Connect(char *aHostInfo, char *aUserID, char *sPassword)
{
    EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR  sUid[80];
    VARCHAR  sPwd[20];
    VARCHAR  sConnStr[1024];
    EXEC SQL END DECLARE SECTION;

    /*----------------------------------------------
      Log on GOLDILOCKS
      ------------------------------------------------*/
    strcpy((char *)sUid.arr, aUserID);
    sUid.len = (short)strlen((char *)sUid.arr);
    strcpy((char *)sPwd.arr, sPassword);
    sPwd.len = (short)strlen((char *)sPwd.arr);
    strcpy((char *)sConnStr.arr, aHostInfo);
    sConnStr.len = (short)strlen((char *)sConnStr.arr);

    /* DB 연결 */
    EXEC SQL CONNECT :sUid IDENTIFIED BY :sPwd USING :sConnStr;
    if(sqlca.sqlcode != 0)
    {
        goto fail_exit;
    }

    return SUCCESS;

  fail_exit:

    PRINT_SQL_ERROR("[ERROR] Connection Failure!");

    return FAILURE;
}

