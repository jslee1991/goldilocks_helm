############################################################
# Configuration file for TableDiff
############################################################

##### SOURCE table configuration: [mandatory] #####
SOURCE_URL      = jdbc:goldilocks://127.0.0.1:22581/test
SOURCE_USER     = TEST
SOURCE_PASSWORD = test
SOURCE_SCHEMA   = PUBLIC
SOURCE_TABLE    = T1

##### TARGET table configuration: [mandatory] #####
TARGET_URL      = jdbc:goldilocks://127.0.0.1:22581/test
TARGET_USER     = TEST
TARGET_PASSWORD = test
TARGET_SCHEMA   = PUBLIC
TARGET_TABLE    = T2

##### TableDiff operation type; DIFF: only diff, SYNC: sync after diff #####
# if OPERATION is DIFF then 'diff_bin_file' file is created. You can synchronize it with TableSync
OPERATION       = SYNC

##### synchronization policy: [mandatoty] #####
# TARGET_INSERT: if a key in the source is not exist in the target then it is inserted in the target
# TARGET_UPDATE: if a column(not key) value is different then target row is updated
# TARGET_DELETE: if a key not in source exists in the target then that row is deleted in the target
# SOURCE_INSERT: if a key not in source exists in the target then that row is inserted in the source
#
# all OFF then it does only diff
# both TARGET_DELETE and SOURCE_INSERT cannot be ON together
TARGET_INSERT = ON
TARGET_UPDATE = ON
TARGET_DELETE = ON
SOURCE_INSERT = OFF

##### exceptional column for diff: [optional] #####
# it can be delimited by ,
# KEY column cannot be execluded
#EXCLUDED_COLUMNS  = C1, C2, C3

##### conditional clause: [optional] #####
#WHERE_CLAUSE = B = 'xxx'

##### row count to print to console: [optional]; default=100000 #####
DISPLAY_ROW_UNIT = 100000

##### synchronization result file: [optional]; default=tablesync.log #####
SYNC_OUT_FILE = tablesync.log

##### diff result file: [optional]; default=tablediff.log #####
DIFF_OUT_FILE = tablediff.log

##### diff binary result: [optional]; if OPERATION is SYNC then this property is ignored #####
DIFF_BIN_FILE = tablediff.bin

##### whether the row synchronization log is propagated to another replica server: [optional]; default=OFF #####
PROPAGATE_REDO_LOG = OFF

##### whether the succeeded DML is logged or not which is used in synchronizing: [optional]; default=OFF #####
# note: too mush logging may decrease the performance
# failed DML is always logged
LOGGING_ON_SUCCESS = OFF

##### whether the diff row is logged or not: [optional]; default=OFF #####
LOGGING_ON_DIFF = OFF

##### job queue size of SYNC: [optional]; default=100 #####
# main thread allocates memory for new jobs to assign to a worker while a worker processes a unit of jobs assigned priorly
# main thread may be blocked because of insufficient job queue
# allocation size for job buffer = JOB_QUEUE_SIZE * JOB_UNIT_SIZE
JOB_QUEUE_SIZE = 100

##### SYNC worker count: [optional]; default=1 #####
JOB_THREAD = 4

##### a unit of jobs that a worker processes: [optional]; default=100 #####
JOB_UNIT_SIZE = 100


##### displays the call stack on occuring of an error: [optional]; default=OFF #####
DISPLAY_CALL_STACK = OFF

##### disjoint conditions for parallel fetching: [optional] #####
# fetch threads as the number of these properties do processing parallelly
# the number of properties is unlimited
# this conditions must be disjoint each other and the union of these parts must be equal to entire set
# the condition columns must be the front part of primary key
#PARTITION_RANGE1 = S12345='12345'
#PARTITION_RANGE2 = S12345='12346'
#PARTITION_RANGE3 = S12345='12347'
#PARTITION_RANGE4 = S12345='12348'

